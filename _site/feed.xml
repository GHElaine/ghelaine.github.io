<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elaine&#39;s Blog</title>
    <description>Leave something behind, keep moving forward.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 05 Sep 2015 22:55:00 +0800</pubDate>
    <lastBuildDate>Sat, 05 Sep 2015 22:55:00 +0800</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>序列化的秘密-读书笔记（1）</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;序列化的秘密–读书笔记（1）&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Yuanqi
2015-09-05  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;为什么要有序列化&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;序列化解决的问题&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;内存被回收后，内存中的对象没法用了  &lt;/li&gt;
  &lt;li&gt;网络上传输的对象，而网络两端不是不共享内存的  &lt;/li&gt;
  &lt;li&gt;远程接口调用，两端各自再虚拟机中运行，内存不共享，参数怎么传，结果怎么返   &lt;/li&gt;
  &lt;li&gt;。。。。。。  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-3&quot;&gt;序列化就是把这些对象转化成一段字节序列，放在流中，可存储于文件或在网络传输，需要用到时读取这个字节序列，重建对象&lt;/h4&gt;

&lt;h2 id=&quot;section-4&quot;&gt;序列化可能引起的问题&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;序列化的实例创建不受限制   &lt;/li&gt;
  &lt;li&gt;序列化的实例可能无法符合类之前的一些要求 ，因为不调用类的构造器   &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;一个类，哪些东西需要序列化&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;静态成员是类属性，不是对象属性，&lt;strong&gt;&lt;em&gt;不需要&lt;/em&gt;&lt;/strong&gt;实例化    &lt;/li&gt;
  &lt;li&gt;普通成员变量&lt;strong&gt;&lt;em&gt;需要&lt;/em&gt;&lt;/strong&gt;实例化&lt;/li&gt;
  &lt;li&gt;成员方法是类的无状态指令，&lt;strong&gt;&lt;em&gt;不需要&lt;/em&gt;&lt;/strong&gt;序列化   &lt;/li&gt;
  &lt;li&gt;成员是引用变量，需要序列化，保证变量的信息完整  &lt;/li&gt;
  &lt;li&gt;继承自序列化过的父类：父类会被序列化，子类不显式表明实现序列化接口也依然可以被序列化，反序列化时不会调用父类的构造方法   &lt;/li&gt;
  &lt;li&gt;继承自未实现序列化的父类： 
    1. 父类有无参构造方法，子类可序列化，且反序列化时调用父类无参构造方法，但父类不可序列化； &lt;br /&gt;
    2. 父类没有无参构造方法，子类反序列化时会抛异常，因为调不到父类的构造方法，无法完整还原对象信息      &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-6&quot;&gt;需要被保护的信息&lt;/h3&gt;
&lt;p&gt;使用transient关键词修饰。&lt;br /&gt;
由transient修饰的变量，不会被序列化。  &lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;序列化算法&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;文件头，表明协议和版本号，类似名片的作用。  &lt;/li&gt;
  &lt;li&gt;对象信息。类名，有哪些属性。  &lt;/li&gt;
  &lt;li&gt;当前对象属性信息，什么类型，什么名字。  &lt;/li&gt;
  &lt;li&gt;当前类的父类信息，类名、属性。   &lt;/li&gt;
  &lt;li&gt;父类的属性值。&lt;/li&gt;
  &lt;li&gt;当前对象的属性值。  &lt;/li&gt;
  &lt;li&gt;当前对象的引用类信息，属性信息，包括其父类。循环2-5的过程。&lt;/li&gt;
  &lt;li&gt;当前对象的引用类属性值。 &lt;br /&gt;
栈式存储。反序列化时，先实例化父类，再实例化子类，因此父类信息在栈顶。   &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-8&quot;&gt;定制个性化序列化算法&lt;/h2&gt;

&lt;h4 id=&quot;section-9&quot;&gt;默认序列化算法不适用的场景：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;安全性高 构造放阿飞的约束严格的场景  &lt;/li&gt;
  &lt;li&gt;类很大，但只想保存一部分信息   不想用transient一个一个标记  &lt;/li&gt;
  &lt;li&gt;希望序列化后的文件易读易懂   &lt;/li&gt;
  &lt;li&gt;逻辑结构（以对象维根的结构）和物理结构（对象序列化后的结构）相差太远     &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-10&quot;&gt;定制序列化算法的方式：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;实现了Serializable的类，覆写writeObject()和readObject()  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```     &lt;/p&gt;

&lt;pre&gt;&lt;code&gt; import java.io.*;   
 /**   
  * Created by elaine on 9/5/15.   
  */    
public class StringList implements Serializable {   
    private static final Long serialVersionUID = 1L;   
            
transient private int size = 0;
transient private Entry head = null;

private static class Entry implements Serializable {
    private static final long serialVersionUID = 1L;
    String data;
    Entry next;
    Entry pre;
}

public StringList(String headString) {
    initHead(headString);
}

private void initHead(String headString) {
    this.head = new Entry();
    this.head.data = headString;
    this.head.next = this.head;
    this.head.pre = this.head;
    this.size = 1;
}

public StringList add(String str) {
    Entry newEntry = new Entry();
    newEntry.data = str;
    newEntry.pre = this.head.pre;
    this.head.pre.next = newEntry;
    this.head.pre = newEntry;
    newEntry.next = this.head;

    this.size ++;
    return this;
}

public String toString() {
    Entry e = head;
    StringBuilder sb = new StringBuilder(e.data);
    while (hasNext(e)) {
        e = e.next;
        sb.append(&quot;-&amp;gt;&quot; + e.data);
    }
    return sb.toString();
}

private boolean hasNext(Entry e) {
    return e.next != this.head;
}

private void writeObject(ObjectOutputStream s) throws IOException {
    s.defaultWriteObject();
    s.writeInt(size);

    // 写入头数据
    Entry e = head;
    s.writeUTF(e.data);

    // 按顺序写入其他字符串
    while(hasNext(e)) {
        e = e.next;
        s.writeUTF(e.data);
    }
}

private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
    s.defaultReadObject();
    int size = s.readInt();

    String headStr = s.readUTF();
    initHead(headStr);

    for (int i = 1; i &amp;lt; size; i++) {
        String str = s.readUTF();
        add(str);
    }
}
public static void main(String[] arg) throws IOException, ClassNotFoundException{
    StringList sl = new StringList(&quot;yuanqi&quot;);
    sl.add(&quot;is&quot;).add(&quot;Elaine&quot;);
    System.out.println(sl);
    SerialUtils.writeObject(sl, &quot;sl.byte&quot;);
    SerialUtils.readObject(&quot;sl.byte&quot;);
} }    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;实现Externalizable接口   &lt;br /&gt;
   Externalizable接口继承自Serializable，区别如下：&lt;br /&gt;
    *    Externalizable里的writeExternal 、readExternal两个方法必须实现  &lt;br /&gt;
    *    Serializable在反序列化时，生成实例依靠语言外的隐藏构造方法，底层靠虚拟机实现，但Externalizable不依赖于虚拟机提供的任何帮助，要求类显式的提供无参构造方法，否则不能序列化    &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.*;

/**
 * Created by elaine on 9/5/15.
 */
 public class StringList implements Externalizable {
    private static final Long serialVersionUID = 1L;

    transient private int size = 0;
    transient private Entry head = null;

private static class Entry implements Serializable {
    private static final long serialVersionUID = 1L;
    String data;
    Entry next;
    Entry pre;
}

public StringList(String headString) {
    initHead(headString);
}

private void initHead(String headString) {
    this.head = new Entry();
    this.head.data = headString;
    this.head.next = this.head;
    this.head.pre = this.head;
    this.size = 1;
}

public StringList add(String str) {
    Entry newEntry = new Entry();
    newEntry.data = str;
    newEntry.pre = this.head.pre;
    this.head.pre.next = newEntry;
    this.head.pre = newEntry;
    newEntry.next = this.head;

    this.size ++;
    return this;
}

public String toString() {
    Entry e = head;
    StringBuilder sb = new StringBuilder(e.data);
    while (hasNext(e)) {
        e = e.next;
        sb.append(&quot;-&amp;gt;&quot; + e.data);
    }
    return sb.toString();
}

private boolean hasNext(Entry e) {
    return e.next != this.head;
}

@Override
public void writeExternal(ObjectOutput out) throws IOException {
    out.writeInt(size);
    Entry e = head;
    out.writeUTF(e.data);
    
    while(hasNext(e)) {
        e = e.next;
        out.writeUTF(e.data);
    }
}

@Override
public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
    int size = in.readInt();
    String headStr = in.readUTF();
    initHead(headStr);
    for (int i = 1; i &amp;lt; size; i++) {
        String str = in.readUTF();
        add(str);
    }
}

//无参构造方法
public StringList() {
    System.out.println(&quot;无参构造方法&quot;);
    initHead(&quot;&quot;);
}

public static void main(String[] arg) throws IOException, ClassNotFoundException{
    StringList sl = new StringList(&quot;yuanqi&quot;);
    sl.add(&quot;is&quot;).add(&quot;Elaine&quot;);
    System.out.println(sl);
    SerialUtils.writeObject(sl, &quot;sl.byte&quot;);
    SerialUtils.readObject(&quot;sl.byte&quot;);
}    }   ```
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Sat, 05 Sep 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/09/05/Secret%20of%20Serialize.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/09/05/Secret%20of%20Serialize.html</guid>
        
        
      </item>
    
      <item>
        <title>深入理解计算机系统——读书笔记</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;深入理解计算机系统–读书笔记&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine 2014-09-14&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ch1&quot;&gt;CH1&lt;/h2&gt;

&lt;p&gt;1.2   hello.c程序的执行过程：&lt;br /&gt;
           Hello.c -&amp;gt; 预处理-&amp;gt; hello.i -&amp;gt; 编译器 -&amp;gt; hello.s -&amp;gt; 汇编器 -&amp;gt; hello.o -&amp;gt; 链接器 -&amp;gt; hello (可执行程序)
        链接是在机器指令生成之前，汇编阶段结束之后开始的。   &lt;/p&gt;

&lt;p&gt;1.7  &lt;strong&gt;&lt;em&gt;操作系统的两个功能：&lt;/em&gt;&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1）防止硬件被失控的应用程序滥用；    &lt;/li&gt;
  &lt;li&gt;2）在控制复杂而又通常广泛不同的低级硬件设备方面，为应用程序提供简单一致的方法。  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.7.1 &lt;strong&gt;&lt;em&gt;进程:&lt;/em&gt;&lt;/strong&gt;操作系统对运行程序的一种抽象。    &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;并发：一个系统上同时可以运行多个程序；    &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;上下文切换：实现不同进程指令交替执行；  &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;上下文：操作系统保存的进程运行时所需的状态信息；  &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.7.2 &lt;strong&gt;&lt;em&gt;线程：&lt;/em&gt;&lt;/strong&gt; 一个进程可以由多个线程组成。每个线程都运行在进程的上下文中，并共享同样的代码和全局数据。多线程比多进程更容易共享数据，也比进程更高效。  &lt;/p&gt;

&lt;p&gt;1.7.3 &lt;strong&gt;&lt;em&gt;虚拟存储器：&lt;/em&gt;&lt;/strong&gt; 每个进程看到的存储器都是一致的，称为虚拟地址空间。&lt;br /&gt;
从下到上，依次：&lt;strong&gt;程序代码和数据区&lt;/strong&gt;（可执行文件直接初始化）；&lt;strong&gt;堆&lt;/strong&gt;（Malloc，free等操作运行时加载）；&lt;strong&gt;共享区&lt;/strong&gt;（C标准库以及数学库加载需要）；&lt;strong&gt;栈&lt;/strong&gt;（运行时加载，动态增长和缩减）；&lt;strong&gt;内核虚拟存储器&lt;/strong&gt;（地址空间顶部四分之一留给内核常驻，程序不允许读取这部分内容）&lt;/p&gt;

&lt;h2 id=&quot;ch2&quot;&gt;CH2&lt;/h2&gt;
&lt;p&gt;2.1.2 字长决定虚拟地址空间的大小。  &lt;/p&gt;

&lt;h2 id=&quot;ch3&quot;&gt;CH3&lt;/h2&gt;
&lt;p&gt;3.1 &lt;strong&gt;&lt;em&gt;摩尔定律&lt;/em&gt;&lt;/strong&gt;：每过18个月，芯片上集成的晶体管的数量翻倍。&lt;br /&gt;
3.6 switch语句是通过跳转表来索引跳转程序段的，这种结构使switch case语句的执行效率远高于if else，并且与case 的数量无关。编译器会在case较多（大于等于4个），且跨度较小时，使用&lt;strong&gt;跳转表&lt;/strong&gt;。&lt;br /&gt;
    &lt;em&gt;** 栈 **&lt;/em&gt;：向着地址变小的方向增长，从顶向底压栈。&lt;/p&gt;

&lt;h2 id=&quot;ch4&quot;&gt;CH4&lt;/h2&gt;
&lt;p&gt;程序指令执行的过程：取指，解析，执行，访存，回写  &lt;/p&gt;

&lt;h2 id=&quot;ch5&quot;&gt;CH5&lt;/h2&gt;
&lt;p&gt;5．1编译器优化的限制：  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1）不能改变正确的程序行为；    &lt;/li&gt;
  &lt;li&gt;2）对程序行为和使用环境的了解有限；      &lt;/li&gt;
  &lt;li&gt;3）需要快速完成编译工作。另外：不可知的函数调用。  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;优化的方面：   &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1） 消除循环的低效率  &lt;/li&gt;
  &lt;li&gt;2） 减少过程调用    &lt;/li&gt;
  &lt;li&gt;3） 消除不必要的存储器引用   &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;处理器性能受三类约束限制：  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;1）程序中数据相关性迫使一些操作延迟直到他们的操作数被计算出来。因为功能单元有一个或多个周期的执行时间，这久设置了一个给定的操作序列执行周期数的下限。  &lt;/li&gt;
  &lt;li&gt;2）资源约束限制了在任意给定时刻能够执行多少个操作。  &lt;/li&gt;
  &lt;li&gt;3）分支预测逻辑限制处理器能够在指令流中超前工作以保持执行单元繁忙的程度。预测错误时，处理器从正确位置重新开始都会引起很大的延迟。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ch7-&quot;&gt;CH7 链接&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;链接：将不同部分的代码和数据收集和组合成为一个单一文件的过程这根文件可被加载（或拷贝）到存储器并执行。链接可以执行于编译时，即源代码被翻译成机器代码时，也可以执行于加载时，就是程序被加载器加载到存储器并执行时，甚至执行于运行时，由应用程序来执行。    &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;静态链接&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;静态链接器：以一组可重定位目标文件和命令行参数作为输入，生成一个完全链接的可以加载和运行的可执行目标文件作为输入。输入的可重定位目标文件由各种不同的代码和数据节组成。指令在一个节中，初始化的全局变量在另一个节中，而未初始化的变量又在另一个节中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;符号解析：目标文件定义和引用符号。目的是将每个符号引用和一个符号定义联系起来。  &lt;br /&gt;
&amp;gt; 连接器解析符号引用的方法是将每个引用与它输入的可重定位目标文件的符号表中的一个确定的符号定义联系起来。对那些和引用定义在相同模块中的本地符号引用，符号解析是非常简单明了的。编译器只允许每个模块中的每个本地符号只有一个定义。编译器确保静态本地变量，他们也会有本地链接符号，拥有唯一的名字。  &lt;/p&gt;

    &lt;p&gt;解析全局符号。的那个编译器遇到一个不是在当前模块中定义的符号时，会假设该符号在其他某个模块中定义的，生成一个连接器符号表表木并把它交给链接器处理。如果链接器在它的任何输入模块都找不到这个被引用的符号，就输出一条错误信息并终止。相同符号会被多个目标文件定义，这种情况，链接器要么标志一个错误，要么以某种方法选出一个定义并抛弃其他定义。&lt;br /&gt;
 &amp;gt; 如何解析多处定义的全局符号：函数和已初始化的全局变量是强符号，未初始化的全局变量是若符号。处理多处定义的规则：&lt;br /&gt;
  &amp;gt;1. 不允许有多个强符号； &lt;br /&gt;
  &amp;gt;2. 如果一个强符号和多个若符号，则选择强符号； &lt;br /&gt;
  &amp;gt;3. 如果有多个若符号，则从若符号中任意选择一个。&lt;br /&gt;
 &lt;strong&gt;&lt;em&gt;规则2和规则3引起注意：不同的程序模块中定义相同符号时，一强一弱的情况下，链接器会静默选择强符号，尤其在重复的符号定义为不同类型时，会引起不易察觉的严重错误。例如一个double型符号会可能会覆盖两个int型符号。&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
 &lt;strong&gt;&lt;em&gt;另一个经验是，注意查看warning&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重定位：编译器和汇编器生成从地址零开始的代码和数据节。连接器通过把每个符号定义与一个存储器位置联系起来，然后修改所有对这些符号的引用，使得它们指向这个存储器位置，而重定位这些节。  &lt;br /&gt;
&amp;gt; &lt;strong&gt;与静态库链接&lt;/strong&gt;   静态库：将所有目标模块打包成一个单独的文件，可以作为链接器的输入。当连接器构造一个输出的可执行文件时，只拷贝静态库里被应用程序引用的目标模块。    &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7.3 目标文件    &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可重定位目标文件：包含二进制代码和数据，可以在编译时与其他可重定位目标文件合并起来，创建一个可执行目标文件。  &lt;/li&gt;
  &lt;li&gt;可执行目标文件：包含二进制代码和数据，其形式可以被直接拷贝到存储器并执行。  &lt;/li&gt;
  &lt;li&gt;共享目标文件：特殊类型的可重定位目标文件，在加载或运行时被动态加载到存储器并链接。    &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7.9 加载可执行目标文件 &lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;内存位置&lt;/td&gt;
      &lt;td&gt;备注&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:———-&lt;/td&gt;
      &lt;td&gt;:————&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;内核虚拟存储器&lt;/td&gt;
      &lt;td&gt;用户代码不可见&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;用户栈&lt;/td&gt;
      &lt;td&gt;运行时创建&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;共享库的存储器映射区域&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;运行时堆&lt;/td&gt;
      &lt;td&gt;由malloc创建&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;读写段（.data, .bss）&lt;/td&gt;
      &lt;td&gt;从可执行文件中加载&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;只读段（.init, .text, .rodata）&lt;/td&gt;
      &lt;td&gt;从可执行文件中加载&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;未使用&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;7.10 动态链接共享库  &lt;/p&gt;

&lt;p&gt;共享库：在运行时，可以加载到任意存储器地址，并在存储器中和一个程序链接起来。即为由动态链接器程序执行的动态链接。  &lt;/p&gt;

&lt;h1 id=&quot;ch8-&quot;&gt;CH8 异常控制流&lt;/h1&gt;

&lt;h3 id=&quot;section-2&quot;&gt;8.1 异常&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;类别&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;原因&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;异步/同步&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;返回行为&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;中断&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;来自I/O设备的信号&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;异步&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;总是返回到下一条指令&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;陷阱&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;有意的异常&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;同步&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;总是返回到下一条指令&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;故障&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;潜在可恢复的错误&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;同步&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;可能返回到下一条指令&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;终止&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;不可恢复的错误&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;同步&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;不会返回&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-3&quot;&gt;8.4 进程控制&lt;/h3&gt;

&lt;p&gt;父进程调用fork函数创建一个新的运行子进程。  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fork函数一次调用，两次返回。一次返回到父进程，一次返回到新建的子进程。&lt;/li&gt;
  &lt;li&gt;父子进程并发执行，独立运行。内核以任意方式交替执行。  &lt;/li&gt;
  &lt;li&gt;父子进程具有相同但独立的地址空间。相同的用户栈、本地变量值、堆、全局变量值，以及相同的代码，但都有独自的私有地址空间，任何对变量的修改都是独立的，不会反映在另一个进程的存储器中。  &lt;/li&gt;
  &lt;li&gt;父子进程共享文件。子进程继承了父进程所有的文件。   &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;回收子进程&lt;br /&gt;
当一个进程由于某种原因终止时，进程保持在终止状态，直到被父进程回收。一个终止但未被回收的进程称为僵死进程。  &lt;br /&gt;
父进程未回收子进程就终止的情况，由init进程来回收。&lt;/p&gt;

</description>
        <pubDate>Sun, 19 Apr 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/04/19/ComputerSystems.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/04/19/ComputerSystems.html</guid>
        
        
      </item>
    
      <item>
        <title>Linux高性能服务器编程-读书笔记-CH8</title>
        <description>&lt;h1 id=&quot;linux&quot;&gt;Linux高性能服务器编程&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @2015.4.18&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;第八章 高性能服务器程序框架&lt;/h3&gt;

&lt;p&gt;服务器程序的三个主要模块    &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I/O处理单元    &lt;/li&gt;
  &lt;li&gt;逻辑单元   &lt;/li&gt;
  &lt;li&gt;存储单元   &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;服务器模型&lt;/strong&gt;    &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;C/S模型&lt;/em&gt;&lt;/strong&gt; &lt;br /&gt;
  客户端/服务器模型
  服务器启动后，创建一个或多个监听socket，调用bind函数绑定服务器端口，调用listen函数等待客户连接。服务器稳定运行后，客户端调用connect函数向服务器发起连接。客户端的异步请求需要服务器使用某种I/O模型来监听。&lt;br /&gt;
  C/S模型适合资源相对集中的场合，实现简单，但访问量过大时，所有客户得到的响应都较慢。  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;P2P模型&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
  点对点模型，网络上所有主机地位平等。&lt;br /&gt;
  云计算机群可看做p2p模型的一个典范。当用户之间传输请求过多时，网络负载将加重。&lt;br /&gt;
  P2P模型往往有一个专门的发现服务器，能够提供查找服务，使得每个客户都尽快找到自己需要的资源。    &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;服务器编程框架&lt;/strong&gt;    &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I/O处理单元：服务器管理客户连接的模块。&lt;br /&gt;
  主要工作：等待并接受新的客户连接，接收客户数据，将服务器数据返回给客户端（数据收发也可能在逻辑单元执行）。服务器机群的I/O处理单元一般都实现了负载均衡。  &lt;/li&gt;
  &lt;li&gt;逻辑单元：一个进程或线程。&lt;br /&gt;
  主要工作：分析并处理客户数据，然后将结果传递给I/O处理单元，或直接发送给客户端。服务器机群中一个逻辑单元本身就是一台逻辑服务器。    &lt;/li&gt;
  &lt;li&gt;网络存储单元：数据库、缓存和文件，甚至是独立服务器，但不是必须的。   &lt;/li&gt;
  &lt;li&gt;请求队列：各个单元之间的通信方式的抽象。服务器机群的请求队列是各台服务器之间预先建立的、静态的、永久的TCP连接。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I/O模型&lt;/strong&gt;&lt;br /&gt;
阻塞I/O、I/O复用和信号驱动I/O都是同步I/O模型。I/O的读写操作都是在I/O事件发生之后，由应用程序完成的。对异步I/O而言，用户可以直接对I/O执行读写操作，这些操作告诉内核用户读写缓冲区的位置，以及I/O操作完成后内核通知应用程序的方式。异步I/O的读写操作总是立即返回，不论是否阻塞，真正的读写由内核接管。  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;两种高效的事件处理模式&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reactor  同步I/O &lt;br /&gt;
  主线程只监听是否有事件发生，有则通知工作线程，读写数据、接受新连接、处理请求均在工作线程完成。&lt;br /&gt;
    &lt;ol&gt;
      &lt;li&gt;主线程在epoll内核事件表注册socket上的读就绪事件。  &lt;/li&gt;
      &lt;li&gt;主线程调用epoll_wait等待socket上的数据可读。  &lt;/li&gt;
      &lt;li&gt;当socket上有数据可读时，epoll_wait通知主线程。主线程将socket可读事件放入请求队列。  &lt;/li&gt;
      &lt;li&gt;睡眠在请求队列的某个工作线程被唤醒，它从socket读取数据，处理客户请求，然后往epoll内核注册该socket上的写就绪事件。  &lt;/li&gt;
      &lt;li&gt;主线程调用epoll_wait等待socket可写。  &lt;/li&gt;
      &lt;li&gt;socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。  &lt;/li&gt;
      &lt;li&gt;睡眠在请求队列上的某个工作线程被唤醒，往socket上写入服务器处理客户请求的结果。  &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Proactor 异步I/O  &lt;br /&gt;
  将所有I/O操作都交给主线程和内核来处理，工作线程仅负责业务逻辑。&lt;br /&gt;
    &lt;ol&gt;
      &lt;li&gt;主线程调用aio_read向内核注册socket上的读完成时间，并告诉内核用户缓冲区的位置，以及读操作完成时如何通知该应用程序。  &lt;/li&gt;
      &lt;li&gt;主线程继续处理其他逻辑。  &lt;/li&gt;
      &lt;li&gt;当socket上的数据被读入用户缓冲区后，内核向应用程序发送一个信号，以通知应用程序数据已经可用。  &lt;/li&gt;
      &lt;li&gt;应用程序预先定义好的信号处理函数选择一个工作线程来处理客户请求，工作线程处理完客户请求之后，调用aio_write函数向内核注册socket上的写完成事件，并告诉内核用户写缓冲区的位置，以及写操作完成时如何通知应用程序。  &lt;/li&gt;
      &lt;li&gt;主线程继续处理其他逻辑。  &lt;/li&gt;
      &lt;li&gt;当用户缓冲区的数据被写入socket后，内核向应用程序发送一个信号，通知应用程序数据已经发送完毕。&lt;/li&gt;
      &lt;li&gt;应用程序预先定义好的信号处理函数选择一个工作线程来做善后处理，比如决定是否关闭socket。  &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;高效并发模式&lt;/strong&gt;   &lt;/p&gt;

&lt;p&gt;计算密集型程序不适合并发，任务切换导致效率更低。    &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;半同步/半异步模式&lt;br /&gt;
  这里的“同步”：完全按照程序代码顺序执行；“异步”：程序执行需要系统事件驱动。&lt;br /&gt;
  同步线程用于处理客户逻辑，异步线程用于处理I/O事件。    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;领导者/追随者模式&lt;br /&gt;
  多个工作线程轮流获得事件源集合，轮流监听、分发处理事件的一种模式。任意时间点只有一个领导者线程，负责监听I/O事件，其他线程都是追随者。   &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 18 Apr 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/04/18/LearnLinux07.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/04/18/LearnLinux07.html</guid>
        
        
      </item>
    
      <item>
        <title>一个人的朝圣</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;一个人的朝圣&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @2015.2.6&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;人生中，总有一些路，只能一个人走。 &lt;br /&gt;
面朝阳光，把黑暗甩在身后。 &lt;br /&gt;
也许孤单极了，也许无奈极了，也许绝望极了。&lt;br /&gt;
这些都不重要，重要的是，你一直在向前走，不曾放弃。  &lt;/p&gt;

&lt;p&gt;哈罗德为了让一个二十年未见的朋友战胜癌症，而徒步六百多英里，从自己的住处，那个曾经幸福而今压抑的地方，走到了朋友临终的居所。这一路无数次想要放弃，却总会碰上不同的人，他们讲着不同的故事，感染着他，鼓励着他。他也曾为温柔的晨光或是壮阔的晚霞而惊叹，却也会遇上那些不相信他会用徒步去救一个癌症病人的悲观者。他一个人走这一路，从一个衣冠楚楚的绅士，变成了一个浑身污垢却毫不在乎的糟老头，他想起了这二十年自己与妻子的生活是如何从幸福甜蜜变成形同陌路——他们那么爱着对方，却狠心的伤害对方。他想起了他的儿子，他不知该如何面对的儿子，却在故事的结尾，才说起了那个他一直觉得愧疚的儿子已经自杀了二十年。二十年前，正是儿子的自杀，他沉浸在自责中无法自拔，妻子也怪他没尽到父亲的责任而与他分居。他开始酗酒，他去工作场所闹事，却有个朋友替他顶下了荒唐的罪，而那个朋友，二十年后躺在修道院，饱受癌症折磨。   &lt;/p&gt;

&lt;p&gt;他以为他是去救那个朋友的，为了还二十年前欠下的人情，而一路的旅途结束后，事实却是他被救赎。他想通了这些年自己的日子是如何急转直下的，他的妻子因为他的离开而开始审视他们之间的生活，是怎样变成了那样的别扭和压抑。&lt;/p&gt;

&lt;p&gt;故事的结局，靠信念徒步六百多英里的朝圣者哈罗德，感动了不列颠，却没能留下朋友，还好朋友走的很安详。而哈罗德和他的妻子，又找回了当年他们初见的感觉。原来这二十年，爱，从未离开。  &lt;/p&gt;

&lt;p&gt;看书的过程就像哈罗德的旅程，无数次想要放弃，因为看着哈罗德在路上一天天遇到的形形色色却大同小异生活平淡的人们，讲着琐碎的生活，实在乏味。他们中有积极的乐天派，也有悲观的负能量传播者，平凡的就像是生活在我们身边的人们。我甚至也怀疑过，哈罗德是否能走到终点，毕竟是一个六十多岁的老头子，身体又不好，谁知道会是个什么结果。但庆幸我还是坚持看完了，因为看到结局的时候，自己心里的震撼，就像是和哈罗德一起走过了六百多英里，原来故事是这样的。  &lt;/p&gt;

&lt;p&gt;原来人生就是这样的。总有些时候孤单、痛苦，都注定只能一肩承担，但千万别放弃，因为当这一切结束的时候，连自己都会佩服自己。最后一刻，哈罗德走过了万水千山，终于知道自己想要的是什么了，却不得不再次放弃一些什么，这样的痛，同样也是成长，因为他已经知道，什么才是最重要的。也许一辈子的时间太短，所以我们都在赶时间赶路，却把生活搞得一团糟，别急别担心，是时候放慢脚步，我们需要静下来想想，就像一个人孤零零的走在天地间，只有这时候，才能真的抛弃一切，看到自己最想要的。  &lt;/p&gt;

&lt;p&gt;我庆幸自己在24岁的最后一天看完了这个故事，看似平淡却波澜壮阔。愿在今后的每一天，我都有那炽烈而生生不息的信念，陪伴着我，走的更远。&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Feb 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/02/06/singleway.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/02/06/singleway.html</guid>
        
        
      </item>
    
      <item>
        <title>Hello, 2015</title>
        <description>&lt;h1 id=&quot;hello-2015&quot;&gt;Hello, 2015&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @2014-12-31 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此时此刻，突然很想听《秒速五厘米》片尾的那首《one more time, one more chance》。这部新海诚的经典之作，每次这首歌响起的时候，眼泪都会忍不住在眼眶打转。这些年过去，依然矫情如此。 &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/5cm.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;去年今日的此时，我在磨子桥的肯德基。&lt;br /&gt;
落地窗外的成都，行人来来往往，车灯摇曳。斑马线一头的情侣，女生穿的像个球，把戴着手套的手捂在脸上抵挡寒风，面前的男生瘦瘦高高，轻轻帮她理一理围巾，街灯昏黄，他们的脸被晕上温暖的橘色……红灯变绿了，他们牵起手走了。我不禁笑了，有些幸福是会传染的。&lt;/p&gt;

&lt;p&gt;肯德基里的灯光照亮了每一个角落，温暖而热闹，这样的日子，是该跟重要的人在一起，毕竟是2013-14的跨年，毕竟，是一生一世的纪念。&lt;/p&gt;

&lt;p&gt;那一天的很多细节我都记不清楚了，只记得零点的时候，远方的天空绽开了绚烂的烟花，我抬头怔怔的看着，一个声音似有似无，新年快乐。&lt;/p&gt;

&lt;p&gt;我只记得宿舍楼下的腊梅花香让人心醉，操场的灯灭了，像是电影开场前的黑暗。然后，我该是等了很久，却也没等来片中主角的出现，可能是只播完了片名，然后就草草放起了片尾曲，我甚至不知道主演是谁，如今，连片名也想不起了。&lt;/p&gt;

&lt;p&gt;纪念即便再隆重，也只是对自己灵魂的抚慰，有些东西，捉不住，却也抹不掉。它不咸不淡的存在着，模糊的任你揉痛了眼睛也看不清，却又清楚的在你的心尖叩击，声音久久回荡在胸腔，闷的你喘不上气。&lt;/p&gt;

&lt;p&gt;我问小黄，如果人的记忆有效期只有一年，每年的1月1日0点自动清除，好还是不好？&lt;/p&gt;

&lt;p&gt;小黄说，那应该会有很多人写很多很多日记吧。就像你。&lt;/p&gt;

&lt;p&gt;我哑然。我有很多本日记，我曾经，在24岁之前，很喜欢写日记。因为我知道，很多东西注定是要失去的，比如时间，比如在流淌的时间上上演的生活。于是我拼了命的想要把它们都记录下来，遇见的人，说过的话，发生的事，他的表情，他的神态，我心里的小变化。纪念即便再隆重，也不如珍惜每一分每一秒来的真诚。  &lt;/p&gt;

&lt;p&gt;所以特别残忍，那些事情不但写在了本子上，也因为被反复回忆了很多遍而刻在心上，而偏偏，我会记录的，都是自己觉得会失去的东西。  &lt;/p&gt;

&lt;p&gt;更妙的是，我每次都料得准，但我没料到我以为不会再弄丢的东西，最终还是丢了。虽然没有写在日记里了，但是我比任何时候都认真，所以也没什么好遗憾的。  &lt;/p&gt;

&lt;p&gt;2014是很特别的一年。这一年经历了很多，愈发觉得自己很多时候天真的像个孩子，成长的空间还很大。 &lt;/p&gt;

&lt;p&gt;2014年，在选择的揪扯中挣扎。在人与人之间，在城市与城市之间，在公司与公司之间。 &lt;/p&gt;

&lt;p&gt;2014年，给自己了一个郑重的承诺，准备给自己打开一个全新的未来，不再依赖，不再等待。&lt;/p&gt;

&lt;p&gt;2014年，活在梦与现实的边缘。&lt;/p&gt;

&lt;p&gt;如果我说2014别走，时间就能停下，那我也许愿意尝试恳求。但回头闭上眼，又多么想这一页快点翻篇。  &lt;/p&gt;

&lt;p&gt;2015年，人生的转折在即。愿我耐得住寂寞，顶得住压力。披荆斩棘，步步为营。&lt;/p&gt;

&lt;p&gt;2015年，全新的自己。坚持一件对的事也许需要很多个理由，如果说服了自己，就坚持下去。放弃一件错的事，却该是挥一挥衣袖，去寻找下一片云彩。&lt;/p&gt;

&lt;p&gt;2015年，全新的生活。不知前路几多荆棘几多欢喜，且都按下性子慢慢享受。&lt;/p&gt;

&lt;p&gt;2015年之后的几年，依然不在父母身边，当初给自己的计划是他们不接受的承诺。父母在不远游，但，游必有方。愿他们幸福安康。&lt;/p&gt;

&lt;p&gt;Hello，2015。全力奔跑，生命中的每一秒，都是不再重来的至宝。&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/12/31/hello2015.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/12/31/hello2015.html</guid>
        
        
      </item>
    
      <item>
        <title>Linux高性能服务器编程-读书笔记-CH7</title>
        <description>&lt;h1 id=&quot;linux&quot;&gt;Linux高性能服务器编程&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @2014.12.28&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;linux-1&quot;&gt;第七章 Linux服务器程序规范&lt;/h3&gt;

&lt;p&gt;​* 日志&lt;br /&gt;
    Linux系统提供守护进程syslogd或rsyslogd来处理系统日志。服务器调试和维护都需要日志系统。&lt;br /&gt;
    分别使用syslog、printk函数将用户输出消息和内核消息输出到指定文件，syslogd或rsyslogd函数通过读取指定文件再输出到指定日志文件，来记录系统日志。 &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;syslog函数&lt;br /&gt;
   用于和rsyslogd守护进程通信：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  #include &amp;lt;syslog.h&amp;gt;
  void syslog( int priority, const char* message, ...);
  /* 采用可变参数来结构化输出；*/  
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;日志掩码  &lt;br /&gt;
  用于过滤系统调试时的日志。&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;	​#include &amp;lt;syslog.h&amp;gt;
	​​int setlogmask( int maskpri);  
	​​​/* 日志级别大于maskpri的日志信息将被系统忽略*/   
	​​​
 ​
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关闭日志功能   &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  #include &amp;lt;syslog.h&amp;gt; 
  void closelog();
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用户信息&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;	​​ #include &amp;lt;sys/types.h&amp;gt;    
	​​ ​#include &amp;lt;unistd.h&amp;gt;
	 ​uid_t getuid();         ​    ​    ​/* 获取真实用户ID */
	 ​​uid_t geteuid();    ​    ​        ​/* 获取有效用户ID */​
	 ​​gid_t getgid();    ​    ​    ​    ​/* 获取真实组ID */
	 ​​​git_t getegit();    ​    ​    ​    ​/* 获取有效组ID */
	 ​​​​int setuid(uid_t uid);    ​    ​   /* 设置真实用户ID */
	 ​​​​​int seteuid(uid_t uid);    ​    ​  /* 设置有效用户ID */
	 ​​​​​​int setgid(git_t gid);    ​    ​     /* 设置真实组ID */
	 ​​​​​​int setegid(git_t gid);    ​    ​    /* 设置有效组ID */
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;一个进程拥有两个用户ID： UID和EUID。EUID为了方便资源访问，它可以使得用户拥有该程序的有效用户权限。&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/12/28/LearnLinux6.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/12/28/LearnLinux6.html</guid>
        
        
      </item>
    
      <item>
        <title>Linux高性能服务器编程-读书笔记-CH6</title>
        <description>&lt;h1 id=&quot;linux&quot;&gt;Linux高性能服务器编程&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @2014.12.25&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;io&quot;&gt;第六章 高级I/O函数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;CGI服务器工作原理：关闭标准输出文件描述符STDOUT_FILENO，复制socket文件描述符connfd，dup总是返回系统中最小的可用文件描述符，实际返回1。服务器输出到标准输出的内容会直接发送到与客户连接对应的socket上，因此printf调用的输出将被客户端获得，而不是显示在服务器程序的终端上。 &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pipe函数&lt;br /&gt;
  创建一个管道，实现进程间通信。  &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;    #include &amp;lt;unistd.h&amp;gt;
    int pipe( int fd[2] )
    /* fd[0]和fd[1]分别是管道的两端。fd[0]只能用于读数据，fd[1]只能用于写数据。默认这一对文件描述符是阻塞的。*/   
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;创建双向管道。&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;    #include &amp;lt;sys/types.h&amp;gt;
    #include &amp;lt;sys/socket.h&amp;gt;
    int socketpair(int domain, int type, int protocol, int fd[2]);   
    /* domain只能用UNIX本地协议族AF_UNIX */
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dup函数和dup2函数 &lt;br /&gt;
  标准输入输出重定向。  &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;   #include &amp;lt;unistd.h&amp;gt;
   int dup( int file_descriptor );
   int dup2( int file_descriptor_one, int file_descriptor_two );  
   /* dup创建一个新的文件描述符，该新文件描述符和原文件描述符file_descriptor指向相同的文件、管道或者网络连接，且返回的文件描述符总是取系统当前可用的最小整数值 */
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;readv和writev函数 &lt;br /&gt;
  readv将数据从文件描述符读到分散的内存块中。writev将分散的内存数据写入文件描述符。  &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;   #include &amp;lt;sys/uio.h&amp;gt;
   ssize_t readv(int fd, const struct iovec* vector, int count);
   ssize_t writev(int fd, const struct iovec* vector, int count);
   /* fd是被操作的文件描述符，iovec* 指定一块内存区域。count是数组长度。*/
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sendfile函数 &lt;br /&gt;
  在两个文件描述符之间直接传递数据。直接在内核中操作，避免了内核缓冲区和用户缓冲区之间的数据拷贝。  &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;   #include &amp;lt;sys/sendfile.h&amp;gt;
   ssize_t sendfile(int out_fd, int in_fd, off_t* offset, size_t count);  
   /* in_fd是待读取内容的文件描述符，必须支持mmap函数，不能是socket管道，out_fd是待写入文件描述符，必须是socket管道，offset指定读入文件流的位置，若为空则从起始位置读，count指定传输的字节数。*/  
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;mmap和munmap函数&lt;br /&gt;
  mmap申请一段内存，将这段内存作为进程间通信的共享内存，也可以直接将文件映射到其中。 munmap负责释放由mmap申请的内存。  &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  #include &amp;lt;sys/mman.h&amp;gt;
  void* mmap(void* start, size_t length, int prot, int flags, int fd, off_t offset);
  int munmap(void* start, size_t length);
  /* start参数用于指定某个特定的地址作为这段内存的起始地址，若设为NULL，则系统自动分配一个地址。length指定内存段长度。prot设置内存段访问权限。flag控制内存段内容被修改后程序的行为。 */
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;splice函数&lt;br /&gt;
  在两个文件描述符之间移动数据，零拷贝。  &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  #include &amp;lt;fcntl.h&amp;gt;
  ssize_t splice(int fd_in, loff_t* off_in, int fd_out, loff_t* off_out, size_t len, unsigned int flags);
  /* fd_in是待输入数据的文件描述符，若为管道文件描述符，则off_in必须为NULL，fd_in不是管道描述符，则off_in必须表示从输入数据流何处开始读取数据，len指定移动数据的长度。flags参数控制数据如何移动。fd_in和fd_out必须至少有一个是管道文件描述符。 */ 
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tee函数&lt;br /&gt;
  在两个管道文件描述符之间复制数据。零拷贝。不消耗数据，源文件描述符上的数据仍然可以用于后续的读操作。 &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  #include &amp;lt;fcnl.h&amp;gt;
  ssize_t tee( int fd_in, int fd_out, size_t len, unsigned int flags );  
  /* 参数含义与splice相同，但fd_in,fd_out都必须为管道文件描述符。成功时返回两个文件描述符之间复制的数据数量（字节数）。*/  
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;fcntl函数&lt;br /&gt;
  file control。提供对文件描述符的各种控制操作。 &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  #include &amp;lt;fcntl.h&amp;gt;
  int fcntl(int fd, int cmd, ...);
  /* fd参数是被操作的文件描述符，cmd参数指定执行何种类型的操作。根据操作类型的不同，该函数可能还需要第三个可选参数arg。*/
&lt;/code&gt;&lt;/pre&gt;

    &lt;hr /&gt;

    &lt;pre&gt;&lt;code&gt;  //将文件描述符设为非阻塞
  int setnonblocking( int fd ) {
  	int old_option = fcntl( fd, F_GETFL);
  	int new_option = old_option | O_NONBLOCK;
  	fcntl( fd, F_SETFL, new_option);
  	return old_option;
  }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 25 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/12/25/LearnLinux05.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/12/25/LearnLinux05.html</guid>
        
        
      </item>
    
      <item>
        <title>git使用心得（1）</title>
        <description>&lt;h1 id=&quot;git1--gitignore&quot;&gt;git使用心得（1）- “.gitignore”&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @ 2014-12-18&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今天无意间看自己的github上socket编程的练习代码库，发现好多无用的可执行文件，于是想要将这些可执行文件忽略，就这么简单的一件事，折腾了将近两个小时。下面来记录一下心得，有些坑，踩一次就该把它填平了。  &lt;/p&gt;

&lt;p&gt;很明显，这事情.gitignore文件做起来最合适了。毫无疑问要修改这个文件。那么问题来了…  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么情况下.gitignore是不起作用的？&lt;/strong&gt;&lt;br /&gt;
当第一次配置仓库的时候，没有把.gitignore文件配置合适，已经push过代码了，那么已经被跟踪的文件，.gitignore是无力忽略的。因此，初始化仓库的时候，应该有两个文件是被“习惯性添加”的，一个是“README.md”，另一个就是“.gitignore”。  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果初始化的时候就是没配置好怎么办？我就是任性想修改忽略规则怎么办？&lt;/strong&gt;   &lt;br /&gt;
1、&lt;code&gt;git rm -r --cached . &lt;/code&gt; 可以帮助删除当前本地库中所有的文件跟踪，也就是缓存，但不会删除本地库中的代码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/gitignore1.png&quot; alt=&quot;image&quot; /&gt;   &lt;/p&gt;

&lt;p&gt;2、&lt;code&gt;vi .gitignore&lt;/code&gt; 修改.gitignore文件。记得保存。&lt;br /&gt;
3、&lt;code&gt;git add . &lt;/code&gt; 不解释。&lt;br /&gt;
4、&lt;code&gt;git commit -m &quot;restart .gitignore&quot;&lt;/code&gt;提交一次，此时.gitignore的新规则就生效了。  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意，此处有坑！&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;如果在上述步骤2过后，你不小心忽略了3直接执行了4，你会发现，你的代码库里的代码，被全部delete了。&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/gitignore2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;既然错误已经铸成，就只能把还没同步的代码（其实是workspace现有的所有代码），&lt;code&gt;git add . &lt;/code&gt;重新加进跟踪吧… &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/gitignore4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;多亏我这个workspace只是用来存一些小代码，基本不存在版本控制的问题否则的话，呵呵…    &lt;/p&gt;

&lt;p&gt;其实误操作导致的代码被删除，还是可以通过撤销commit找回来的。具体方法在这&lt;a href=&quot;http://git-scm.com/book/zh/ch9-7.html&quot;&gt;git数据维护及恢复&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说说.gitignore文件里面写什么&lt;/strong&gt; &lt;br /&gt;
* 忽略某些后缀的文件（比如.exe）：*.exe&lt;br /&gt;
* 忽略某个文件夹中的所有文件（比如文件夹a下）：a/*&lt;br /&gt;
* 指定跟踪某个后缀的文件（比如.cpp），即使文件所在位置的其他文件都被忽略：!*.cpp&lt;br /&gt;
* 说个特殊的，整个workspace中，只想跟踪某指定类型的文件（比如.cpp）：    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /*   
    !*.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
&lt;p&gt;嗯，现在愈发觉得git是个好东西了。觉得不好用的时候，是自己没用熟练，也没习惯而已。还是玩不转，还是有很多坑等着我去踩，还是慢慢来吧。&lt;/p&gt;

</description>
        <pubDate>Thu, 18 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/12/18/git1.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/12/18/git1.html</guid>
        
        
      </item>
    
      <item>
        <title>繁华落尽，一地金黄</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;繁华落尽，一地金黄&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @ 2014-12-13  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近我才知道，学校里那条被我一直固执的称作“银杏大道”的路，原来大名叫“绿杨路”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/campus1.jpg&quot; alt=&quot;image&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;这是我在成都的最后一个冬天了。原来再久再长的时间，都有过完的一天，这七年的异乡求学路，终于也看到了头。   &lt;/p&gt;

&lt;p&gt;我从未像今年一样这样在意这条路上的银杏，虽然它们一直都很美。每年初春，一冬天的蛰伏换来新生的嫩芽，绿的让人怜惜。然后在盛夏枝繁叶茂起来，高而挺拔的一树翠绿，满眼尽是无限生机。十一月的川大里，这条路上的银杏造就了川大最美的风景，每天都有无数新人在这里拍婚纱，偶尔起风，漫天飞扬的金色叶片，如同蝴蝶盘旋在一对对新婚燕尔的身旁，白色的婚纱，温柔的笑颜，眼里眉间都是幸福的味道。我不记得他们的脸，却记得他们发自内心的笑容，映的银杏都醉了。   &lt;/p&gt;

&lt;p&gt;曾经见到一对情侣在银杏树下忘情相拥，天气不好，没有阳光，却有风将树上的残叶催了下来。女孩的脸埋在男孩的肩头，我几乎看得到她被风扬起的发，在漫天的银杏叶中，那么让人怜惜。我远远望着，画面太过美好，不敢打扰，心里却多的是感慨和一丝不易察觉的异样——这样的意境这般的风景，终究是被我辜负了。  &lt;/p&gt;

&lt;p&gt;同样的地点，某天有一对拍婚纱照的情侣。女主角的脸抬起来，被光打的有些恍惚不清，洁白的婚纱铺在一地金黄的银杏叶上，摄影师用专注而奇怪的姿势努力捕捉她最美的样子。几声快门后，旁边冲上来的是抓着棉衣的男主角，他半跪在女生身边，轻轻又急切的为她裹上棉衣，搓搓已经晾了许久的胳膊。认真又温柔的样子，满眼都写着爱意。若不是他，我几乎忘了这是已经入冬的光景。&lt;/p&gt;

&lt;p&gt;深秋时节，每当天公稍稍开恩，阳光普照的日子，这条路上便挤满了前来拍照的人们。带着他们撒欢的小狗，牵着又蹦又跳的调皮孩子，举起相机，镜头前都是喜笑颜开的样子。   &lt;/p&gt;

&lt;p&gt;今天再来这路上，已冷清许久。像是一场散场后的电影，没有彩蛋，片尾曲不咸不淡，不紧不慢。树上的金黄所剩无几，地上的落叶早已被勤劳的环卫工人清理干净，剩下几株倔强的留着黄叶，像是在等着我来为它们伤感。  &lt;/p&gt;

&lt;p&gt;灿烂时，无尽辉煌，目之所及都是欢喜的姿态，凋敝时，枯枝残叶，环顾四周唯有耳机里传来平静的歌声。   &lt;/p&gt;

&lt;p&gt;这是我看的最后一季川大的银杏了。  &lt;/p&gt;

&lt;p&gt;还好，早在意识到即将失去的时候，已经拍下了不少照片，甚至也不惜走进镜头，破坏上佳的美景，只为了证明，真的来过。这三年的光阴过了，总要留下些证据在手里，某天回头，问自己，这段青春，到底是荒芜了否？  &lt;/p&gt;

&lt;p&gt;路过的风景，总在那些过去的路上。你知道它们都在，却被时光拉去了反方向，你不能回头，你知道即使走回去，也见不到它们了，因为已经不再是同一个时空，你已不是当年看风景的你了。就让它们把最美的时刻留在你的记忆里，至少，你还会怀念。 &lt;/p&gt;

&lt;p&gt;繁华落尽，一地金黄。那些年年岁岁都执着的一枯一荣的银杏啊，别人的风景里，你努力的美过了，像是一棵开了花的树，不辜负那些为你举起相机的人们，珍惜那些相识的缘分。等到漫长而寒冷的冬天到来的时候，你在他们的记忆里，点缀着他们的生活，他们在你的记忆里，温暖着你的心窝。&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/12/13/yidijinhuang.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/12/13/yidijinhuang.html</guid>
        
        
      </item>
    
      <item>
        <title>《黑客与画家》 读后感</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;《黑客与画家》 读后感&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @2014-12-12  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;终于用了将近一个月时间，把这本被无数人推荐的《黑客与画家》翻完了。说实话，颠覆了我很多的认识，却有更多的地方说到了心坎上。   &lt;/p&gt;

&lt;p&gt;这位硅谷创业之父的很多言论在我看来是有些激进的，但是他强大的逻辑让我没法不信服。搞这行的，果然是靠逻辑吃饭的。   &lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;黑客——“酷”的代名词&lt;/h3&gt;
&lt;p&gt;虽然从来没有觉得“黑客”是个贬义词，却从来也没有像现在这样想要成为一个Hacker。我周围多的是“程序猿”，我同样也没觉得这是个贬义词，不过是一群IT技术人员的自嘲，不过这里面确实有一大帮是普通的码农，而其他少数，则是Hacker们谦虚的自称。这就是保罗·格雷厄姆所说的那些不甘平庸，追求自由和刺激，猎奇而又叛逆的家伙们。这帮人简直酷毙了。&lt;/p&gt;

&lt;p&gt;此时不禁想起亚伦·斯沃兹。这位天才黑客的自杀引起了轩然大波，我想做我们这行的，应该没有人对他不是心怀敬意，为之惋惜吧。作为一个典型的黑客，他就是格雷厄姆所说的那种，不服管教，天资聪颖，不喜欢被人设限的天才。&lt;/p&gt;

&lt;p&gt;我想，或许黑客天生就是激进分子，而他们的激进，正是推动整个行业技术迅猛发展的动力。 &lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;程序是写给人看的&lt;/h3&gt;
&lt;p&gt;保罗在书中引用了一句&lt;strong&gt;“程序是写给人看的，顺带能在机器上运行”&lt;/strong&gt;，实在感同身受，便写在了实验室的电脑桌面上。我想应该有不少人都有过“改别人的代码不如自己重写”的经历，大家都只顾着自己负责的程序，点击运行的时候，能够正常的跑出结果，才不会管什么维护什么扩展。在大学的实验室，这点尤其明显。因为绝绝大多数人，都是完全没有工程经验，没写过太多代码的学生。能把代码跑出正确的结果已经是谢天谢地了。   &lt;/p&gt;

&lt;p&gt;然而这一点，可能正是真正优秀的程序员与普通的程序员的差别。这里说的是程序员，不是黑客。曾经在鹅厂实习的时候，某天某大boss说，鹅厂庞大的代码库里，有那么一行代码是谁都不敢碰的，是一个大神写的一行perl语句，但是没有注释，没有人看得懂，没有人敢动。我想，保罗应该是喜欢perl的吧，比起C++，估计绝大多数具有黑客潜质的程序员，也不会觉得C++比perl酷吧。其实无关语言，代码就是应该让别人看着舒服，不论是注释还是缩进命名风格等等。这也是所有大公司几乎都有自己编程规范的原因吧。而这点，必须从一开始写代码就注意去养成习惯。此处必须感谢李大师，曾在深夜三四点阅读我submit的代码，然后勒令我必须把缩进和命名写规范了，包括运算符两边的空格。现在写的代码，勉强可以看。  &lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;关于贫富差距&lt;/h3&gt;
&lt;p&gt;首先必须要感谢保罗在书中有这样的一章阐述。&lt;/p&gt;

&lt;p&gt;这可能是全书带给我的震撼最大的一章了。&lt;strong&gt;财富是可以创造出来的，而不是一个固定值用来平均分的。&lt;/strong&gt;因此，如果不计贪污腐败，贫富差距并不是坏事，因为富有的人创造了财富，而这些创造财富的人们，真正推动了社会的进步，这才是真正意义上的“多劳多得”吧？  &lt;/p&gt;

&lt;p&gt;当我从小到大形成的观念和“被教育”的思想，受到这样不同观点的冲击的时候，我才意识到其实有很多困惑，我只是没有去深究过，而被保罗这样提出的时候，我才发现，我很轻易的就被他说服了。贫富差距不但不是坏事，甚至可能是社会进步的动力。有些理想，之所以称之为理想，恐怕只是好心人想要把大家团结在一起，至于理想什么时候实现，只能说，现在的阶段任务还没完成，革命尚未成功，同志仍需努力，其他的，就不要想太多了。   &lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;不甘平庸&lt;/h3&gt;
&lt;p&gt;黑客永远喜欢在不经意的时候从天而降，在别人最不设防的时候突然造访，留下点属于自己的痕迹，或者干脆什么也不干，然后绝尘而去，挥一挥衣袖，不带走一片云彩。  &lt;/p&gt;

&lt;p&gt;因为他们不走寻常路，因为他们，“天生骄傲”，不甘平庸。做不平庸的事，用不平庸的方式。&lt;/p&gt;

&lt;p&gt;在我所生活的这二十多年间，正是人们深深感慨“科技改变生活”的时代。谁能想过手机不再是打电话的工具，而称为了生活不可分割的一部分，互联网，让我所认识的世界与父辈大为不同。这些便捷，归功于那些不甘平庸的黑客，他们不设限的思维，让我的生活每天都充满着新鲜和期待。没有做不到，只有想不到，尤其是对一群智商卓群的家伙来说。拥抱变化，可能也是“不甘平庸”的另一种行动吧。&lt;/p&gt;

&lt;p&gt;保罗的不甘平庸，绕不过Lisp，这包含在“不采取平庸的方式”解决问题。他对Lisp的极度推崇几乎达到了狂热的地步。他这么盛赞的语言，当然不能不去领略一二。  &lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;黑客与画家&lt;/h3&gt;
&lt;p&gt;编程是门艺术。&lt;br /&gt;
而大多数码农，都自甘平庸的认为，这是门糊口的技术。&lt;strong&gt;“我们不创造代码，我们只是代码的搬运工”。&lt;/strong&gt;&lt;br /&gt;
听说每个人心里，其实都住着一个艺术家，做着一个艺术家的梦。有一天，编程，或者软件，可以成为一门艺术那样的令人赞叹，有着让人惊艳的设计，或是给人非同凡响的体验，这应该是每个黑客的艺术家之梦吧。  &lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;section-6&quot;&gt;但愿今日我所说的“他们”，有朝一日可以变成“我们”。&lt;/h4&gt;

</description>
        <pubDate>Fri, 12 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/12/12/hacker.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/12/12/hacker.html</guid>
        
        
      </item>
    
  </channel>
</rss>
