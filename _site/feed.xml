<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elaine&#39;s Blog</title>
    <description>Leave something behind, keep moving forward.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 02 Dec 2014 20:57:54 +0800</pubDate>
    <lastBuildDate>Tue, 02 Dec 2014 20:57:54 +0800</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>Linux高性能服务器编程-读书笔记-CH4</title>
        <description>&lt;h1 id=&quot;linux&quot;&gt;Linux高性能服务器编程&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @2014.12.2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tcpipinternetweb&quot;&gt;第4章 TCP/IP通信案例：访问Internet上的web服务器&lt;/h3&gt;

&lt;h4 id=&quot;section&quot;&gt;一些概念：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;正向代理服务器：要求客户端自己设置代理服务器的地址。每次请求都将直接发送到该代理服务器，并由代理服务器来请求目标资源。    &lt;/li&gt;
  &lt;li&gt;反向代理服务器：设置在服务器端，客户端无须进行任何设置。用代理服务器来接收Internet上的连接请求，将请求转发给内部网络上的服务器，并将从内部服务器上得到的结果返回给客户端。  &lt;br /&gt;
  &amp;gt;正向代理服务器与客户端在同一个逻辑网络中，反向代理服务器与服务器在同一个逻辑网络中。    &lt;/li&gt;
  &lt;li&gt;透明代理服务器：只能设置在网关上。可看做正向代理的一种特殊情况。&lt;br /&gt;
&amp;gt;代理服务器通常还提供缓存目标资源的功能。    &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;http-&quot;&gt;HTTP服务 通信过程&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;访问DNS服务器     &lt;/li&gt;
  &lt;li&gt;本地名称查询    &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP通信    &lt;/p&gt;

    &lt;p&gt;HTTP请求：&lt;br /&gt;
  1. 短连接：请求处理完后立即关闭连接。同一个客户的多个HTTP请求不能共用一个TCP连接。&lt;br /&gt;
  2. 长连接：多个请求可以使用同一个TCP连接。极大减少了网络上由于建立TCP连接导致的负荷，减少处理时间。&lt;/p&gt;

    &lt;p&gt;HTTP应答：    &lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;100 continue  通知客户端继续发送数据；    &lt;br /&gt;
200 OK 请求成功； &lt;br /&gt;
3xx 重定向；
4xx 客户端错误； &lt;br /&gt;
5xx 服务器错误；&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Cookie:&lt;br /&gt;
  HTTP的无状态特性（无上下文），使得交互程序不方便承上启下。cookie是服务器发送给客户端的特殊信息，客户端每次发送给服务器的请求都需要带上这些信息，服务器就可以区分不同客户，基于浏览器的自动登录就是用cookie实现的。   &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 02 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/12/02/LearnLinux3.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/12/02/LearnLinux3.html</guid>
        
        
      </item>
    
      <item>
        <title>直面生死</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;直面生死&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @2014-12-1   &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-1&quot;&gt;&lt;em&gt;佛说，人生有八苦，生，老，病，死，爱别离，怨长久，求不得，放不下。&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;早就听说过这话，也一直记在心里，总在情绪低落的时候，拿出来佯装文艺。我一直觉得这样的智慧实在难得，人生之苦，莫过于此，却鲜有深思。昨天睡前，听了一期柯文哲的演讲&lt;a href=&quot;http://v.youku.com/v_show/id_XNjI5NDAzMzY0.html&quot;&gt;《生与死的智慧》&lt;/a&gt;，将生死讲的透彻，一下子才觉察，人生的所有痛苦，都源于对人生的无能为力，却又无法劝说自己坦然面对。   &lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;&lt;em&gt;生命花园中的园丁&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;柯文哲其人，我不多说，也不论他的政治身份和观点。只说他身为一个外科医生，面对的生死别离，就比我们常人要多得多。 我不敢说医生这个职业该让所有人肃然起敬，至少在我心中，他们是伟大而善良的群体，他们代表着希望。然而，纵然现代医学如何发达，总有解决不了的疑难杂症，总有无能为力的生命逝去。柯文哲说，“医生是生命花园中的园丁”，他们并不能改变生死的结局，而只能尽力，让每个人的活着的时候更加好看，因为人，固有一死。  &lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;&lt;em&gt;怎样才算活着&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;生老病死乃人之常情，人总在拼命改造世界，实际能改造的，也只是自己眼中的小世界，是人类自己的生活。人作为与地球上千千万万生命体从生物特征上来说平等的物种，逃不过一个生命体的自然规律。就像《超体》中所说，环境适宜的时候，细胞选择繁殖，而环境恶化的时候，细胞选择永生。佛家说生老病死是八苦之四，不过是因为凡人无法坦然面对这样的轮回，因为即使人心再伟大，每个人最关注的，始终是自己。这其实无论对错，只是人毕竟不是神，那些神祇，不过是人类理想的状态而已。   &lt;/p&gt;

&lt;p&gt;还好，人非草木，更非鸟兽，除了生命，人还有希望，人总是向往着更美好的事物，并且总有人，很可能是绝大多数人，相信着那些美好的事物总会到来。我想，这大概也是推动着人类不断去进步的源动力吧，生生不息的努力，为了在自己永生之后，让后代活的更加舒适，生命如此代代延续，使得人类成为了这地球上亿万年间的赢家，超越了其他仅仅停留在“活着”的层面的动物。    &lt;/p&gt;

&lt;p&gt;柯文哲在演讲中提了一个问题“怎样才算活着”。他说追求这个问题的答案的过程，本身就是这个问题的答案。Can’t agree more. 先哲对这个问题的追寻，使得后代们能够有巨人的肩膀得以立足，吾辈的奋斗和创造，得以使未来人加速前进。这种推动力带来的不是速度上的递增，而是加速度上的递增。正如祖先自拿起第一块石头作为工具使用，就已经开始了人类一发不可收拾的快马加鞭的进化。   &lt;/p&gt;

&lt;h3 id=&quot;an&quot;&gt;&lt;em&gt;A的N次方&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;人生再长不过百年，譬如朝露，去日苦多。朝露尚可滋润一方土地，养活几株花草，更何况仁慈的上天已经给了我们更多的时间和足够的机会，去更好的“活着”。愚钝的人，总有许多对生活的抱怨，总是贪心的想要更多，却忘记自己是否应得，平凡之人，在活着的时候立足于脚下之地，保自家安宁，去时也算无所遗憾，难怪一生平淡，好在自给自足也算自在，智者，懂得生死的道理，生之时不辞辛苦，奋斗不息，死之时坦然面对，心中安宁，他的智慧流传在人间，得以永生。   &lt;/p&gt;

&lt;p&gt;柯文哲说，“人生应该像A的N次方”，当你对社会的贡献大于索取，A就是大于1的，此时A的N次方趋向无穷大，社会就会越来越好，反之，A小于1时，A的N次方将会快速趋近于0，社会很快就会崩溃。   &lt;/p&gt;

&lt;p&gt;我不敢说人人都是积极向上的，但人这种生物，在进化的过程中，除了学会了希望，还学会了羞耻心。相信总有绝大多数的人，不会愿意去做那个拖后腿的，这也是人类得以进步的保障。   &lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;&lt;em&gt;最困难的不是面对各种挫折打击，而是面对各种挫折打击，却不失去对人世的热情&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;柯文哲以这句话作为演讲的结束语。  &lt;br /&gt;
年轻的时候，总探讨这些人生的大哲学是否太过老成？非也，传统观念中年迈之时才来讨论生死，正是因为我们绝大多数都是凡人，那时已有太多的无能为力。&lt;br /&gt;
所以能在初入社会的时候，就听到前辈这样的道理，并能从中领悟一二，也是一大幸运，不得不感谢这世上总有智者。  &lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;人总说“人生苦短”，其实我看来，苦不苦，要看以怎样的心态去面对生，短不短，要看你以怎样的心态面对死。&lt;/p&gt;

</description>
        <pubDate>Mon, 01 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/12/01/LiveAndDeath.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/12/01/LiveAndDeath.html</guid>
        
        
      </item>
    
      <item>
        <title>Linux高性能服务器编程-读书笔记-CH3</title>
        <description>&lt;h1 id=&quot;linux&quot;&gt;Linux高性能服务器编程&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @2014.11.30&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tcp&quot;&gt;第三章 TCP协议详解&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;TCP服务的特点：&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;面向连接&lt;/strong&gt; 双方必须先建立连接，然后开始数据读写。全双工连接，双方数据读写可以通过一个连接进行，完成数据交换后，双方都必须断开连接。 
  基于广播和多播的应用不能使用TCP，应使用UDP。    &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;字节流&lt;/strong&gt; 发送端执行的写操作的次数和接收端执行的读操作次数之间没有固定的数量关系。&lt;strong&gt;应用程序对数据的发送何接收没有边界限制。&lt;/strong&gt;接收端应用程序可以一次读出TCP缓冲区的所有数据，也可分多次读取，取决于应用程序读缓冲区的大小。    &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;可靠的&lt;/strong&gt; 1.采用发送应答机制；2.超时重传机制；3.最终以IP数据报发送，TCP协议还会对报文段进行重排整理。  &lt;/p&gt;

        &lt;p&gt;&lt;em&gt;序号 ISN+首字偏移；&lt;/em&gt; &lt;br /&gt;
  &lt;em&gt;确认号 ACK=对方序号+1；用于对对方的响应确认。&lt;/em&gt; &lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP连接的建立和关闭         &lt;br /&gt;
   连接建立：3次握手 &lt;br /&gt;
    &lt;ol&gt;
      &lt;li&gt;主机1发送带有SYN标志的同步报文段，向主机2发起连接请求，该报文段包含一个序号；   &lt;/li&gt;
      &lt;li&gt;主机2发送自己的序号，并对主机1的报文段确认，确认值（ACK）为主机1的序号+1；   &lt;/li&gt;
      &lt;li&gt;主机1对主机2的报文段确认，TCP连接建立完成。      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;连接关闭：4次挥手    &lt;br /&gt;
  1. 主机1发送FIN给主机2，请求关闭连接； &lt;br /&gt;
  2. 主机2确认该报文段；
  3. 主机2发送自己的结束报文段； &lt;br /&gt;
  4. 主机1确认主机2的报文段。 &lt;br /&gt;
  &lt;strong&gt;连接关闭过程可能是客户端主动关闭，也可能是服务器执行主动关闭，也可能是同时关闭&lt;/strong&gt;    &lt;/p&gt;

    &lt;p&gt;半关闭状态
  TCP连接是全双工的，允许两个方向的数据传输被独立关闭。 &lt;br /&gt;
  服务器和客户端应用程序判断对方是否已经关闭连接的方法是： read系统调用返回0（收到结束报文段）。由于半关闭状态的存在，TCP连接断开需要4次挥手，双方都要确认对方已经关闭连接。        &lt;/p&gt;

    &lt;p&gt;连接超时 &lt;br /&gt;
  对于失败的连接，TCP会尝试重连，每次重连的超时时间增加1倍，多次重连失败后，放弃连接并通知应用程序。   &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP状态转移 &lt;br /&gt;
  TIME_WAIT状态 &lt;br /&gt;
    &lt;ol&gt;
      &lt;li&gt;可靠的终止TCP连接；  &lt;/li&gt;
      &lt;li&gt;保证让迟来的TCP报文段有足够的时间被识别并丢弃。&lt;br /&gt;
  Linux系统中，一个TCP端口不能被同时打开多次。只有当前连接不在TIME_WAIT状态，即其连接的报文段已全部处理完毕，才能开启下一次连接。   &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;复位报文段     &lt;br /&gt;
  在某些情况下，TCP连接的一端会向另一端发送复位报文段，以通知对方关闭连接或重连。
    &lt;ol&gt;
      &lt;li&gt;访问端口不存在，或该端口处于TIME_WAIT状态 ；  &lt;/li&gt;
      &lt;li&gt;异常终止连接，一旦发送复位报文段，发送端所有排队的数据全丢弃；   &lt;/li&gt;
      &lt;li&gt;处理半打开连接，一方已关闭连接，另一方没有接到结束报文段而保持连接，此时保持连接的一方发送报文后，将收到复位报文段。   &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TCP交互数据流 &lt;br /&gt;
 适用于实时性要求高的应用程序或协议。
   Nagle算法： 要求TCP连接双方任意时刻最多只能发送一个未被确认的TCP报文段，在该报文段确认到达之前不能发送其他TCP报文段，在等待确认的同时，手机本端需要发送的微量数据，并在确认到来时，以一个TCP报文段全部发出，减少了网络上微小的TCP报文段数量。&lt;strong&gt;算法优点：确认到达的越快，数据也发送的越快。&lt;/strong&gt;      &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TCP成块数据流   &lt;br /&gt;
  适用于数据量大的应用程序或协议。&lt;br /&gt;
  发送端可以一次发送多个报文段，接收端可以一次确认多个报文段。能够发送多少与设置的通告窗口大小有关。  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;带外数据   &lt;br /&gt;
  有些传输层协议有带外数据概念。用于迅速通告对方本方发生的重要事件。带外数据比普通数据有更高的优先级，总是立即被发送而不论缓冲区中是否有排队等待发送的普通数据。TCP有紧急指针标志和紧急指针两个字段，相当于带外数据。   &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TCP超时重传   &lt;br /&gt;
  超时发生后执行重传，每次超时时间都增加1倍，几次重传均失败后，由IP和ARP接管。 内核中有两个参数：1. 由IP接管前TCp最少执行的重传次数，默认3；2. 连接放弃前，TCP最多执行的重传次数，默认15。   &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;拥塞控制  &lt;br /&gt;
  拥塞控制最终控制的变量是发送端一次性向网络写入的数据量，即SWND发送窗口。SWND限定了发送端能连续发送的TCP报文段数量。    &lt;br /&gt;
  SWND太小，引起明显的网络延迟，反之则易导致网络拥塞。实际SWND值是RWND（接收方的接收通告窗口）和CWND（发送端拥塞窗口）中的较小者。 &lt;br /&gt;
    &lt;ol&gt;
      &lt;li&gt;慢启动、拥塞避免；
  慢启动的TCP的拥塞窗口一开始是探测性增长的，慢启动会导致拥塞窗口快速膨胀，导致网络拥塞，因此设定慢启动门限值，CWND超过该值时，TCP拥塞控制进入拥塞避免阶段。&lt;br /&gt;
  &amp;gt;判断拥塞发生的依据：1.传输超时，或者TCP重传定时器溢出。 2.接收到重复的确认报文段。   &lt;br /&gt;
  &amp;gt;情况1采用慢启动和拥塞避免来处理；情况2使用快速重传和快速恢复来处理。若情况2发生在重传定时器溢出之后，则按照情况1处理。         &lt;/li&gt;
      &lt;li&gt;快速重传和快速恢复  &lt;br /&gt;
  判断是否真正发生拥塞：若发送端连续收到3个重复的确认报文段，则认为是拥塞。  &lt;br /&gt;
  处理方法：&lt;br /&gt;
  1）当收到3个重复的确认报文段，重新计算慢启动门限，然后立即重传丢失的报文段，并重新设置CWND。&lt;br /&gt;
  2）每次收到1个重复的确认，设置CWND=CWND+SMSS。此时发送端可以发送新的TCP报文段。&lt;br /&gt;
  3）当收到新数据的确认时，设置CWND为新的慢启动门限。   &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 30 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/11/30/LearnLinux2.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/11/30/LearnLinux2.html</guid>
        
        
      </item>
    
      <item>
        <title>Linux高性能服务器编程-读书笔记-CH2</title>
        <description>&lt;h1 id=&quot;linux&quot;&gt;Linux高性能服务器编程&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @2014.11.28     &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ip&quot;&gt;第二章 IP协议详解&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;IP服务的特点 &lt;br /&gt;
  &lt;strong&gt;无状态&lt;/strong&gt;（通信双方不同步传输数据的状态信息）可能是乱序、重复的数据     &lt;br /&gt;
      优点：简单高效
  &lt;strong&gt;无连接&lt;/strong&gt;（通信双方不长久维持对方的任何信息）每次发送都必须指明IP  &lt;br /&gt;
  &lt;strong&gt;不可靠&lt;/strong&gt;（不能保证IP数据报准确的到达接收端）上层需要自己实现数据确认，超时重传等      &lt;/li&gt;
  &lt;li&gt;IP转发&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;检查数据报头部TTL值，若为0，丢弃数据报；&lt;/li&gt;
      &lt;li&gt;查看路由选择新安乡，若设置了该选项，则检查数据报的目标IP地址是否为本机的某个IP地址，若不是，则发送ICMP源站选路失败报文给发送端；  &lt;/li&gt;
      &lt;li&gt;若有必要，则发源端一个ICMP重定向报文，告诉它一个更合理的下一跳路由器；   &lt;/li&gt;
      &lt;li&gt;TTL值-1；  &lt;/li&gt;
      &lt;li&gt;处理IP头部选项；   &lt;/li&gt;
      &lt;li&gt;若有必要，执行IP分片操作；   &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
IPV6并不是IPV4的简单扩展，而是完全不同的协议， 除了解决IP不够用的问题，还增加了多播和流的功能，引入了自动配置功能，增加专门的网络安全功能等。   
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/11/28/LearnLinux1.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/11/28/LearnLinux1.html</guid>
        
        
      </item>
    
      <item>
        <title>黑客与画家-读书笔记</title>
        <description>&lt;h1 id=&quot;paul-graham&quot;&gt;黑客与画家 · Paul Graham&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;edit by Elaine -2014-11-09    &lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;程序是写给人看的，附带能在机器上运行。  &lt;/li&gt;
  &lt;li&gt;触怒他人的言论是那些可能会有人相信的言论。  最令人暴跳如雷的言论，就是被认为说出了真相的言论。    &lt;/li&gt;
  &lt;li&gt;自由思考比畅所欲言更重要。    &lt;/li&gt;
  &lt;li&gt;如果自己就是潮水的一部分，怎么能看见潮流的方向呢？你只能永远保持质疑。  &lt;/li&gt;
  &lt;li&gt;安全问题的关键在于不要有漏洞，而不是任何设计上的决策。  &lt;/li&gt;
  &lt;li&gt;财富才是你的目标，金钱不是。  金钱是财富的一种简便的表达方式。  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 27 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/11/27/Hacker.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/11/27/Hacker.html</guid>
        
        
      </item>
    
      <item>
        <title>Linux高性能服务器编程 读书笔记-CH1</title>
        <description>&lt;h1 id=&quot;linux&quot;&gt;Linux高性能服务器编程&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @2014.11.22    &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tcpip&quot;&gt;第一章  TCP/IP协议族&lt;/h3&gt;

&lt;h4 id=&quot;tcpip-1&quot;&gt;TCP/IP协议族体系结构及主要协议&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;数据链路层 &lt;br /&gt;
  ARP地址解析协议  &lt;strong&gt;将IP地址解析成MAC地址（物理地址）&lt;/strong&gt;  &lt;br /&gt;
  RARP逆地址解析协议  &lt;strong&gt;无盘工作站可以通过网卡上的物理地址来向网络管理者询问自身的IP地址&lt;/strong&gt;      &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网络层 &lt;br /&gt;
  实现数据包的选路和转发。  &lt;br /&gt;
  IP协议（因特网协议）  &lt;strong&gt;根据数据包的IP地址决定如何投递， 使用逐跳的方式确定通讯路径&lt;/strong&gt; &lt;br /&gt;
  ICMP协议（因特网控制报文协议） &lt;strong&gt;主要用于检测网络连接&lt;/strong&gt; &lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;差错报文&lt;/strong&gt;  用来回应网路错误：1.目标不可达（值为3）2.重定向（值为5）&lt;br /&gt;
&lt;strong&gt;查询报文&lt;/strong&gt; 用来查询网络信息，比如ping查询是否可达（值为8）   &lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;传输层&lt;br /&gt;
  为两台主机上的应用程序提供端到端的通信。 &lt;br /&gt;
  TCP协议（传输控制协议） &lt;strong&gt;为应用层提供可靠的，面向连接和基于流的服务。可靠的。没有边界长度限制。&lt;/strong&gt;    &lt;br /&gt;
  UDP（用户数据报协议） &lt;strong&gt;为应用层提供不可靠、无连接和基于数据报的服务。不可靠。&lt;/strong&gt;  &lt;br /&gt;
  SCTP（流控制传输协议） &lt;strong&gt;为因特网上传输电话信号二设计&lt;/strong&gt;     &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用层 &lt;br /&gt;
  负责处理应用程序的逻辑。 &lt;br /&gt;
  DNS（域名服务）&lt;strong&gt;提供机器域名到其IP地址的转换&lt;/strong&gt;    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;封装 &lt;br /&gt;
  用户应用向目的主机请求时，请求内容自顶向下打包成帧的过程。    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;分用&lt;br /&gt;
  目的主机收到请求时，沿着协议栈自底向上分别处理数据，并最终交给目标服务或应用程序的过程。    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;socket和TCP/IP &lt;br /&gt;
  实现应用程序访问协议服务的系统调用。  &lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;将应用程序数据从用户缓冲区复制到TCP/UDP内核发送缓冲区，交付内核发送数据；或由内核TCP/UDP接收缓冲区中复制数据到用户缓冲区，以读取数据。&lt;/li&gt;
      &lt;li&gt;可以通过它们来修改内核中各层协议的某些头部信息或其他数据结构，更精细的控制底层通信。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 26 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/11/26/LearningLinux0.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/11/26/LearningLinux0.html</guid>
        
        
      </item>
    
  </channel>
</rss>
