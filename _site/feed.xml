<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elaine&#39;s Blog</title>
    <description>Leave something behind, keep moving forward.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 30 Nov 2014 22:22:34 +0800</pubDate>
    <lastBuildDate>Sun, 30 Nov 2014 22:22:34 +0800</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>Linux高性能服务器编程-读书笔记-CH3</title>
        <description>&lt;h1 id=&quot;linux&quot;&gt;Linux高性能服务器编程&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @2014.11.30&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tcp&quot;&gt;第三章 TCP协议详解&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;TCP服务的特点：&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;面向连接&lt;/strong&gt; 双方必须先建立连接，然后开始数据读写。全双工连接，双方数据读写可以通过一个连接进行，完成数据交换后，双方都必须断开连接。 
  基于广播和多播的应用不能使用TCP，应使用UDP。    &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;字节流&lt;/strong&gt; 发送端执行的写操作的次数和接收端执行的读操作次数之间没有固定的数量关系。&lt;strong&gt;应用程序对数据的发送何接收没有边界限制。&lt;/strong&gt;接收端应用程序可以一次读出TCP缓冲区的所有数据，也可分多次读取，取决于应用程序读缓冲区的大小。    &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;可靠的&lt;/strong&gt; 1.采用发送应答机制；2.超时重传机制；3.最终以IP数据报发送，TCP协议还会对报文段进行重排整理。  &lt;/p&gt;

        &lt;p&gt;&lt;em&gt;序号 ISN+首字偏移；&lt;/em&gt; &lt;br /&gt;
  &lt;em&gt;确认号 ACK=对方序号+1；用于对对方的响应确认。&lt;/em&gt; &lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP连接的建立和关闭         &lt;br /&gt;
   连接建立：3次握手 &lt;br /&gt;
    &lt;ol&gt;
      &lt;li&gt;主机1发送带有SYN标志的同步报文段，向主机2发起连接请求，该报文段包含一个序号；   &lt;/li&gt;
      &lt;li&gt;主机2发送自己的序号，并对主机1的报文段确认，确认值（ACK）为主机1的序号+1；   &lt;/li&gt;
      &lt;li&gt;主机1对主机2的报文段确认，TCP连接建立完成。      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;连接关闭：4次挥手    &lt;br /&gt;
  1. 主机1发送FIN给主机2，请求关闭连接； &lt;br /&gt;
  2. 主机2确认该报文段；
  3. 主机2发送自己的结束报文段； &lt;br /&gt;
  4. 主机1确认主机2的报文段。 &lt;br /&gt;
  &lt;strong&gt;连接关闭过程可能是客户端主动关闭，也可能是服务器执行主动关闭，也可能是同时关闭&lt;/strong&gt;    &lt;/p&gt;

    &lt;p&gt;半关闭状态
  TCP连接是全双工的，允许两个方向的数据传输被独立关闭。 &lt;br /&gt;
  服务器和客户端应用程序判断对方是否已经关闭连接的方法是： read系统调用返回0（收到结束报文段）。由于半关闭状态的存在，TCP连接断开需要4次挥手，双方都要确认对方已经关闭连接。        &lt;/p&gt;

    &lt;p&gt;连接超时 &lt;br /&gt;
  对于失败的连接，TCP会尝试重连，每次重连的超时时间增加1倍，多次重连失败后，放弃连接并通知应用程序。   &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP状态转移 &lt;br /&gt;
  TIME_WAIT状态 &lt;br /&gt;
    &lt;ol&gt;
      &lt;li&gt;可靠的终止TCP连接；  &lt;/li&gt;
      &lt;li&gt;保证让迟来的TCP报文段有足够的时间被识别并丢弃。&lt;br /&gt;
  Linux系统中，一个TCP端口不能被同时打开多次。只有当前连接不在TIME_WAIT状态，即其连接的报文段已全部处理完毕，才能开启下一次连接。   &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;复位报文段     &lt;br /&gt;
  在某些情况下，TCP连接的一端会向另一端发送复位报文段，以通知对方关闭连接或重连。
    &lt;ol&gt;
      &lt;li&gt;访问端口不存在，或该端口处于TIME_WAIT状态 ；  &lt;/li&gt;
      &lt;li&gt;异常终止连接，一旦发送复位报文段，发送端所有排队的数据全丢弃；   &lt;/li&gt;
      &lt;li&gt;处理半打开连接，一方已关闭连接，另一方没有接到结束报文段而保持连接，此时保持连接的一方发送报文后，将收到复位报文段。   &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TCP交互数据流 &lt;br /&gt;
 适用于实时性要求高的应用程序或协议。
   Nagle算法： 要求TCP连接双方任意时刻最多只能发送一个未被确认的TCP报文段，在该报文段确认到达之前不能发送其他TCP报文段，在等待确认的同时，手机本端需要发送的微量数据，并在确认到来时，以一个TCP报文段全部发出，减少了网络上微小的TCP报文段数量。&lt;strong&gt;算法优点：确认到达的越快，数据也发送的越快。&lt;/strong&gt;      &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TCP成块数据流   &lt;br /&gt;
  适用于数据量大的应用程序或协议。&lt;br /&gt;
  发送端可以一次发送多个报文段，接收端可以一次确认多个报文段。能够发送多少与设置的通告窗口大小有关。  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;带外数据   &lt;br /&gt;
  有些传输层协议有带外数据概念。用于迅速通告对方本方发生的重要事件。带外数据比普通数据有更高的优先级，总是立即被发送而不论缓冲区中是否有排队等待发送的普通数据。TCP有紧急指针标志和紧急指针两个字段，相当于带外数据。   &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TCP超时重传   &lt;br /&gt;
  超时发生后执行重传，每次超时时间都增加1倍，几次重传均失败后，由IP和ARP接管。 内核中有两个参数：1. 由IP接管前TCp最少执行的重传次数，默认3；2. 连接放弃前，TCP最多执行的重传次数，默认15。   &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;拥塞控制  &lt;br /&gt;
  拥塞控制最终控制的变量是发送端一次性向网络写入的数据量，即SWND发送窗口。SWND限定了发送端能连续发送的TCP报文段数量。    &lt;br /&gt;
  SWND太小，引起明显的网络延迟，反之则易导致网络拥塞。实际SWND值是RWND（接收方的接收通告窗口）和CWND（发送端拥塞窗口）中的较小者。 &lt;br /&gt;
    &lt;ol&gt;
      &lt;li&gt;慢启动、拥塞避免；
  慢启动的TCP的拥塞窗口一开始是探测性增长的，慢启动会导致拥塞窗口快速膨胀，导致网络拥塞，因此设定慢启动门限值，CWND超过该值时，TCP拥塞控制进入拥塞避免阶段。&lt;br /&gt;
  &amp;gt;判断拥塞发生的依据：1.传输超时，或者TCP重传定时器溢出。 2.接收到重复的确认报文段。   &lt;br /&gt;
  &amp;gt;情况1采用慢启动和拥塞避免来处理；情况2使用快速重传和快速恢复来处理。若情况2发生在重传定时器溢出之后，则按照情况1处理。         &lt;/li&gt;
      &lt;li&gt;快速重传和快速恢复  &lt;br /&gt;
  判断是否真正发生拥塞：若发送端连续收到3个重复的确认报文段，则认为是拥塞。  &lt;br /&gt;
  处理方法：&lt;br /&gt;
  1）当收到3个重复的确认报文段，重新计算慢启动门限，然后立即重传丢失的报文段，并重新设置CWND。&lt;br /&gt;
  2）每次收到1个重复的确认，设置CWND=CWND+SMSS。此时发送端可以发送新的TCP报文段。&lt;br /&gt;
  3）当收到新数据的确认时，设置CWND为新的慢启动门限。   &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 30 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/11/30/LearnLinux2.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/11/30/LearnLinux2.html</guid>
        
        
      </item>
    
      <item>
        <title>Linux高性能服务器编程-读书笔记-CH2</title>
        <description>&lt;h1 id=&quot;linux&quot;&gt;Linux高性能服务器编程&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @2014.11.28     &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ip&quot;&gt;第二章 IP协议详解&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;IP服务的特点 &lt;br /&gt;
  &lt;strong&gt;无状态&lt;/strong&gt;（通信双方不同步传输数据的状态信息）可能是乱序、重复的数据     &lt;br /&gt;
      优点：简单高效
  &lt;strong&gt;无连接&lt;/strong&gt;（通信双方不长久维持对方的任何信息）每次发送都必须指明IP  &lt;br /&gt;
  &lt;strong&gt;不可靠&lt;/strong&gt;（不能保证IP数据报准确的到达接收端）上层需要自己实现数据确认，超时重传等      &lt;/li&gt;
  &lt;li&gt;IP转发&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;检查数据报头部TTL值，若为0，丢弃数据报；&lt;/li&gt;
      &lt;li&gt;查看路由选择新安乡，若设置了该选项，则检查数据报的目标IP地址是否为本机的某个IP地址，若不是，则发送ICMP源站选路失败报文给发送端；  &lt;/li&gt;
      &lt;li&gt;若有必要，则发源端一个ICMP重定向报文，告诉它一个更合理的下一跳路由器；   &lt;/li&gt;
      &lt;li&gt;TTL值-1；  &lt;/li&gt;
      &lt;li&gt;处理IP头部选项；   &lt;/li&gt;
      &lt;li&gt;若有必要，执行IP分片操作；   &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
IPV6并不是IPV4的简单扩展，而是完全不同的协议， 除了解决IP不够用的问题，还增加了多播和流的功能，引入了自动配置功能，增加专门的网络安全功能等。   
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/11/28/LearnLinux1.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/11/28/LearnLinux1.html</guid>
        
        
      </item>
    
      <item>
        <title>黑客与画家-读书笔记</title>
        <description>&lt;h1 id=&quot;paul-graham&quot;&gt;黑客与画家 · Paul Graham&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;edit by Elaine -2014-11-09    &lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;程序是写给人看的，附带能在机器上运行。  &lt;/li&gt;
  &lt;li&gt;触怒他人的言论是那些可能会有人相信的言论。  最令人暴跳如雷的言论，就是被认为说出了真相的言论。    &lt;/li&gt;
  &lt;li&gt;自由思考比畅所欲言更重要。    &lt;/li&gt;
  &lt;li&gt;如果自己就是潮水的一部分，怎么能看见潮流的方向呢？你只能永远保持质疑。  &lt;/li&gt;
  &lt;li&gt;安全问题的关键在于不要有漏洞，而不是任何设计上的决策。  &lt;/li&gt;
  &lt;li&gt;财富才是你的目标，金钱不是。  金钱是财富的一种简便的表达方式。  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 27 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/11/27/Hacker.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/11/27/Hacker.html</guid>
        
        
      </item>
    
      <item>
        <title>Linux高性能服务器编程 读书笔记-CH1</title>
        <description>&lt;h1 id=&quot;linux&quot;&gt;Linux高性能服务器编程&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Edit by Elaine @2014.11.22    &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tcpip&quot;&gt;第一章  TCP/IP协议族&lt;/h3&gt;

&lt;h4 id=&quot;tcpip-1&quot;&gt;TCP/IP协议族体系结构及主要协议&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;数据链路层 &lt;br /&gt;
  ARP地址解析协议  &lt;strong&gt;将IP地址解析成MAC地址（物理地址）&lt;/strong&gt;  &lt;br /&gt;
  RARP逆地址解析协议  &lt;strong&gt;无盘工作站可以通过网卡上的物理地址来向网络管理者询问自身的IP地址&lt;/strong&gt;      &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网络层 &lt;br /&gt;
  实现数据包的选路和转发。  &lt;br /&gt;
  IP协议（因特网协议）  &lt;strong&gt;根据数据包的IP地址决定如何投递， 使用逐跳的方式确定通讯路径&lt;/strong&gt; &lt;br /&gt;
  ICMP协议（因特网控制报文协议） &lt;strong&gt;主要用于检测网络连接&lt;/strong&gt; &lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;差错报文&lt;/strong&gt;  用来回应网路错误：1.目标不可达（值为3）2.重定向（值为5）&lt;br /&gt;
&lt;strong&gt;查询报文&lt;/strong&gt; 用来查询网络信息，比如ping查询是否可达（值为8）   &lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;传输层&lt;br /&gt;
  为两台主机上的应用程序提供端到端的通信。 &lt;br /&gt;
  TCP协议（传输控制协议） &lt;strong&gt;为应用层提供可靠的，面向连接和基于流的服务。可靠的。没有边界长度限制。&lt;/strong&gt;    &lt;br /&gt;
  UDP（用户数据报协议） &lt;strong&gt;为应用层提供不可靠、无连接和基于数据报的服务。不可靠。&lt;/strong&gt;  &lt;br /&gt;
  SCTP（流控制传输协议） &lt;strong&gt;为因特网上传输电话信号二设计&lt;/strong&gt;     &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用层 &lt;br /&gt;
  负责处理应用程序的逻辑。 &lt;br /&gt;
  DNS（域名服务）&lt;strong&gt;提供机器域名到其IP地址的转换&lt;/strong&gt;    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;封装 &lt;br /&gt;
  用户应用向目的主机请求时，请求内容自顶向下打包成帧的过程。    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;分用&lt;br /&gt;
  目的主机收到请求时，沿着协议栈自底向上分别处理数据，并最终交给目标服务或应用程序的过程。    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;socket和TCP/IP &lt;br /&gt;
  实现应用程序访问协议服务的系统调用。  &lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;将应用程序数据从用户缓冲区复制到TCP/UDP内核发送缓冲区，交付内核发送数据；或由内核TCP/UDP接收缓冲区中复制数据到用户缓冲区，以读取数据。&lt;/li&gt;
      &lt;li&gt;可以通过它们来修改内核中各层协议的某些头部信息或其他数据结构，更精细的控制底层通信。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 26 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2014/11/26/LearningLinux0.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/11/26/LearningLinux0.html</guid>
        
        
      </item>
    
  </channel>
</rss>
